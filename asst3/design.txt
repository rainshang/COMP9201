--frame table
    Since we use kseg0 for kernel, so we divide kseg0 into 4K frames.
    We save this division as frame table at the begining(bottom)
    of Free RAM.

    Free RAM locates fllowing OS/161 Kernel in kseg0.

    Thus, the available memory now is RAM - OS/161 Kernel - Frame
    Table.

    Then we allocate twice size Page table following Frame Table,
    that means after initialisation, the available memory now is
    RAM - OS/161 Kernel - Frame Table - Page Table.

    We save the size as the offset of frame table, for future
    alloc_kpage.

--hashed page table
    We create a hashed page table which size is twice of frame
    table.

    When we want to insert a PTE into the HPT, we use the pid
    (address_space*) and the vaddr to hash a index in HPT check the
    this position.

    if vacant, put it here.

    if not, we iterate the linked list and append the new entry to the last position.

    When we want to find a PTE in the HPT, we use the same hash
    method to get the index, if the pte at this position mathes the
    pid, cool

    If not, we also iterate the linked list to find the specific one, until match
    or not found

    Release a page.
        --We decide to free a page table entry when free_kpages()
        is called. Since the frame is freed ultimately, so we invalid
        all the ptes which vaddrs are the page address.

--TLB
    When the TLB misses, an interrupt occours, which leads to call
    the vm_fault().

    After checking the faulttype, we use the same hash method to
    get the index in HPT.

    Found, use the pte at this postion to update TLB.

    Not found, check whether the address is with any region.

    Yes, insert a new PTE into HPT.  No, fail

--Address Space
    --Region
        We define a struct 'region' to describe different regions
        in the address space of one process.

        When one process is created, runprogram() will call load_elf()
        to define a new region by calling as_define_region().

        For stack, data and code regions, this function will be
        called to create their own regions sometime. Particularly,
        the statck pointer points to its bottom while others point
        to top. Thus, we need a as_define_stack() func to distinguish.

        We define 'region' as a linklist, including base address, size, old permission and current permission,
        to present all the specific regions in this process space.
    --as_activate and as_deactivate will flush TLB.
    --as_copy and as_destroy
        As fork will call as_copy, we copy all regions of parent process to the child process,
        then we create all page table entries of parent process to the child process and copy the contents from the frame address.
        as_destroy will delete the relative process' page table entries and then delete the regions.
    --as_prepare_load and as_complete_load will modify the region's dirty_mask for the tlb update.
